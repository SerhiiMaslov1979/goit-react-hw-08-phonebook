{"version":3,"file":"static/js/329.e7218b67.chunk.js","mappings":"0OAAaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,EACtBC,EAAe,SAAAH,GAAK,OAAIA,EAAMI,MAAV,EAIpBC,EAAyB,SAAAL,GACpC,IAAMC,EAAWF,EAAeC,GAC1BI,EAASD,EAAaH,GAE5B,OAAOC,EAASG,QAAO,SAAAE,GAAO,OAC5BA,EAAQC,KAAKC,cAAcC,SAASL,EAAOI,cADf,GAG/B,E,mBCCKE,EAASC,EAAAA,KAAaC,MAAM,CAChCL,KAAMI,EAAAA,KAEHE,QALW,yHAOV,0IAEDC,WACHC,OAAQJ,EAAAA,KAELE,QAdH,+EAgBI,gGAEDC,aAGCE,EAAgB,CACpBT,KAAM,GACNQ,OAAQ,IAGGE,EAAe,WAC1B,IAAMC,GAAWC,EAAAA,EAAAA,MACXlB,GAAWmB,EAAAA,EAAAA,IAAYrB,GAe7B,OACE,SAAC,KAAD,CACEiB,cAAeA,EACfK,iBAAkBX,EAClBY,SAjBiB,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UAE5BvB,EAASwB,MACP,SAAAnB,GAAO,OAAIiB,EAAOhB,KAAKC,gBAAkBF,EAAQC,KAAKC,aAA/C,IAGTkB,MAAM,GAAD,OAAIH,EAAOhB,KAAX,6BAGPW,GAASS,EAAAA,EAAAA,KAAW,UAAKJ,KACzBC,IACD,EAGC,UAKE,UAAC,KAAD,CAAMI,aAAa,MAAMC,UAAU,qBAAnC,WACE,mBAAOC,QAAQ,OAAOD,UAAU,qBAAhC,kBAEE,SAAC,KAAD,CAAOE,KAAK,OAAOxB,KAAK,UACxB,SAAC,KAAD,CAAcA,KAAK,OAAOyB,UAAU,YAEtC,mBAAOF,QAAQ,SAASD,UAAU,uBAAlC,oBAEE,SAAC,KAAD,CAAOE,KAAK,OAAOxB,KAAK,YACxB,SAAC,KAAD,CAAcA,KAAK,SAASyB,UAAU,YAExC,mBAAQD,KAAK,SAASF,UAAU,oBAAhC,6BAMP,E,SCvEM,SAASI,IACd,IAAM7B,GAASgB,EAAAA,EAAAA,IAAYjB,GACrBe,GAAWC,EAAAA,EAAAA,MACjB,OACE,kBACEY,KAAK,OACLG,SAAU,SAAAC,GAAC,OAAIjB,GAASkB,EAAAA,EAAAA,GAAUD,EAAEE,OAAOC,OAAhC,EACXA,MAAOlC,GAGZ,CCPD,IAwBA,EAxBqB,WACnB,IAAMc,GAAWC,EAAAA,EAAAA,MAEXoB,GAAmBnB,EAAAA,EAAAA,IAAYf,GAErC,OACE,eAAIwB,UAAU,qBAAd,SACGU,EAAiBC,KAAI,gBAAGC,EAAH,EAAGA,GAAIlC,EAAP,EAAOA,KAAMQ,EAAb,EAAaA,OAAb,OACpB,gBAAac,UAAU,qBAAvB,WACE,eAAGA,UAAU,qBAAb,UACGtB,EADH,KACWQ,MAEX,mBACEc,UAAU,SACVa,QAAS,kBAAMxB,GAASyB,EAAAA,EAAAA,IAAcF,GAA7B,EAFX,sBAJOA,EADW,KAe3B,ECQc,SAASG,IACtB,IAAM3C,GAAWmB,EAAAA,EAAAA,IAAYrB,GACvBmB,GAAWC,EAAAA,EAAAA,MAMjB,OAJA0B,EAAAA,EAAAA,YAAU,WACR3B,GAAS4B,EAAAA,EAAAA,MACV,GAAE,CAAC5B,KAGF,iBAAKW,UAAU,iBAAf,WACE,uCACA,SAAC,EAAD,KACA,sCACA,kDACC5B,EAAS8C,OAAS,GACjB,iCACE,SAACd,EAAD,KAEA,SAAC,EAAD,QAGF,yCAIP,C","sources":["redux/Contacts/selectors.js","components/ContactsForm/ContactsForm.jsx","components/Filter/Filter.jsx","components/ContactsList/ContactsList.jsx","pages/ContactsPage.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.items;\nexport const selectFilter = state => state.filter;\nexport const selectError = state => state.contacts.error;\nexport const selectIsLoading = state => state.contacts.isLoading;\n\nexport const selectFilteredContacts = state => {\n  const contacts = selectContacts(state);\n  const filter = selectFilter(state);\n\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n};\n","import React from 'react';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport '../ContactsForm/ContactsForm.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { selectContacts } from '../../redux/Contacts/selectors';\nimport { addContact } from '../../redux/Contacts/operations.js';\n\nconst numberReg =\n  /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/;\n\nconst nameReg = /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      nameReg,\n      'Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d`Artagnan'\n    )\n    .required(),\n  number: yup\n    .string()\n    .matches(\n      numberReg,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactsForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    if (\n      contacts.some(\n        contact => values.name.toLowerCase() === contact.name.toLowerCase()\n      )\n    ) {\n      alert(`${values.name} is already in contacts`);\n      return;\n    }\n    dispatch(addContact({ ...values }));\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <Form autoComplete=\"off\" className=\"ContactsForm__Form\">\n        <label htmlFor=\"name\" className=\"ContactsForm__name\">\n          Name\n          <Field type=\"text\" name=\"name\" />\n          <ErrorMessage name=\"name\" component=\"div\" />\n        </label>\n        <label htmlFor=\"number\" className=\"ContactsForm__number\">\n          Number\n          <Field type=\"text\" name=\"number\" />\n          <ErrorMessage name=\"number\" component=\"div\" />\n        </label>\n        <button type=\"submit\" className=\"ContactsForm__btn\">\n          Add contact\n        </button>\n      </Form>\n    </Formik>\n  );\n};\n","import { useSelector, useDispatch } from 'react-redux';\nimport { setFilter } from '../../redux/Filter/filterSlice';\nimport { selectFilter } from '../../redux/Contacts/selectors';\n\nexport function Filter() {\n  const filter = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  return (\n    <input\n      type=\"text\"\n      onChange={e => dispatch(setFilter(e.target.value))}\n      value={filter}\n    />\n  );\n}\n","import React from 'react';\nimport './ContactsList.css';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/Contacts/operations';\nimport { useSelector } from 'react-redux';\nimport { selectFilteredContacts } from '../../redux/Contacts/selectors';\n\nconst ContactsList = () => {\n  const dispatch = useDispatch();\n\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  return (\n    <ul className=\"ContactsList__list\">\n      {filteredContacts.map(({ id, name, number }) => (\n        <li key={id} className=\"ContactsList__item\">\n          <p className=\"ContactsList__text\">\n            {name}: {number}\n          </p>\n          <button\n            className=\"Button\"\n            onClick={() => dispatch(deleteContact(id))}\n          >\n            Delete\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nexport default ContactsList;\n","// import { useEffect } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { Helmet } from 'react-helmet';\n// import { TaskList } from 'components/TaskList/TaskList';\n// import { TaskEditor } from 'components/TaskEditor/TaskEditor';\n// import { fetchTasks } from 'redux/tasks/operations';\n// import { selectLoading } from 'redux/tasks/selectors';\n\n// export default function Tasks() {\n//   const dispatch = useDispatch();\n//   const isLoading = useSelector(selectLoading);\n\n//   useEffect(() => {\n//     dispatch(fetchTasks());\n//   }, [dispatch]);\n\n//   return (\n//     <>\n//       <Helmet>\n//         <title>Your tasks</title>\n//       </Helmet>\n//       <TaskEditor />\n//       <div>{isLoading && 'Request in progress...'}</div>\n//       <TaskList />\n//     </>\n//   );\n// }\n\nimport { ContactsForm } from '../components/ContactsForm/ContactsForm';\nimport { Filter } from '../components/Filter/Filter';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../redux/Contacts/selectors';\nimport ContactsList from '../components/ContactsList/ContactsList';\n// import './App.css';\nimport { useEffect } from 'react';\nimport { fetchContacts } from '../redux/Contacts/operations';\n\nexport default function ContactsPage() {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className=\"App__container\">\n      <h1>Phonebook</h1>\n      <ContactsForm />\n      <h2>Contacts</h2>\n      <h3>Find contacts by name</h3>\n      {contacts.length > 0 ? (\n        <>\n          <Filter />\n\n          <ContactsList />\n        </>\n      ) : (\n        <p>No contacts</p>\n      )}\n    </div>\n  );\n}\n"],"names":["selectContacts","state","contacts","items","selectFilter","filter","selectFilteredContacts","contact","name","toLowerCase","includes","schema","yup","shape","matches","required","number","initialValues","ContactsForm","dispatch","useDispatch","useSelector","validationSchema","onSubmit","values","resetForm","some","alert","addContact","autoComplete","className","htmlFor","type","component","Filter","onChange","e","setFilter","target","value","filteredContacts","map","id","onClick","deleteContact","ContactsPage","useEffect","fetchContacts","length"],"sourceRoot":""}